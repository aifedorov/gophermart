// Code generated by MockGen. DO NOT EDIT.
// Source: internal/order/repository/db/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/order/repository/db/repository.go -destination=internal/order/repository/mocks/repository_mock.go -package=mock_order
//

// Package mock_order is a generated GoMock package.
package mock_order

import (
	reflect "reflect"

	repository "github.com/aifedorov/gophermart/internal/order/repository/db"
	decimal "github.com/shopspring/decimal"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateTopUpOrder mocks base method.
func (m *MockRepository) CreateTopUpOrder(userID, orderNumber string) (repository.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopUpOrder", userID, orderNumber)
	ret0, _ := ret[0].(repository.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTopUpOrder indicates an expected call of CreateTopUpOrder.
func (mr *MockRepositoryMockRecorder) CreateTopUpOrder(userID, orderNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopUpOrder", reflect.TypeOf((*MockRepository)(nil).CreateTopUpOrder), userID, orderNumber)
}

// CreateWithdrawalOrder mocks base method.
func (m *MockRepository) CreateWithdrawalOrder(userID, orderNumber string, amount decimal.Decimal) (repository.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithdrawalOrder", userID, orderNumber, amount)
	ret0, _ := ret[0].(repository.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithdrawalOrder indicates an expected call of CreateWithdrawalOrder.
func (mr *MockRepositoryMockRecorder) CreateWithdrawalOrder(userID, orderNumber, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithdrawalOrder", reflect.TypeOf((*MockRepository)(nil).CreateWithdrawalOrder), userID, orderNumber, amount)
}

// GetOrderByNumber mocks base method.
func (m *MockRepository) GetOrderByNumber(number string) (repository.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByNumber", number)
	ret0, _ := ret[0].(repository.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByNumber indicates an expected call of GetOrderByNumber.
func (mr *MockRepositoryMockRecorder) GetOrderByNumber(number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByNumber", reflect.TypeOf((*MockRepository)(nil).GetOrderByNumber), number)
}

// GetOrdersByUserID mocks base method.
func (m *MockRepository) GetOrdersByUserID(userID string) ([]repository.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUserID", userID)
	ret0, _ := ret[0].([]repository.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByUserID indicates an expected call of GetOrdersByUserID.
func (mr *MockRepositoryMockRecorder) GetOrdersByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUserID", reflect.TypeOf((*MockRepository)(nil).GetOrdersByUserID), userID)
}

// GetUserBalanceByUserID mocks base method.
func (m *MockRepository) GetUserBalanceByUserID(userID string) (decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalanceByUserID", userID)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalanceByUserID indicates an expected call of GetUserBalanceByUserID.
func (mr *MockRepositoryMockRecorder) GetUserBalanceByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalanceByUserID", reflect.TypeOf((*MockRepository)(nil).GetUserBalanceByUserID), userID)
}

// GetUserWithdrawByUserID mocks base method.
func (m *MockRepository) GetUserWithdrawByUserID(userID string) (decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithdrawByUserID", userID)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithdrawByUserID indicates an expected call of GetUserWithdrawByUserID.
func (mr *MockRepositoryMockRecorder) GetUserWithdrawByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithdrawByUserID", reflect.TypeOf((*MockRepository)(nil).GetUserWithdrawByUserID), userID)
}

// GetWithdrawalsByUserID mocks base method.
func (m *MockRepository) GetWithdrawalsByUserID(userID string) ([]repository.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalsByUserID", userID)
	ret0, _ := ret[0].([]repository.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalsByUserID indicates an expected call of GetWithdrawalsByUserID.
func (mr *MockRepositoryMockRecorder) GetWithdrawalsByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalsByUserID", reflect.TypeOf((*MockRepository)(nil).GetWithdrawalsByUserID), userID)
}

// UpdateOrderStatus mocks base method.
func (m *MockRepository) UpdateOrderStatus(number string, status repository.Orderstatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", number, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockRepositoryMockRecorder) UpdateOrderStatus(number, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockRepository)(nil).UpdateOrderStatus), number, status)
}
