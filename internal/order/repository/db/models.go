// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package repository

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/shopspring/decimal"
)

type Orderstatus string

const (
	OrderstatusNEW        Orderstatus = "NEW"
	OrderstatusPROCESSING Orderstatus = "PROCESSING"
	OrderstatusINVALID    Orderstatus = "INVALID"
	OrderstatusPROCESSED  Orderstatus = "PROCESSED"
)

func (e *Orderstatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Orderstatus(s)
	case string:
		*e = Orderstatus(s)
	default:
		return fmt.Errorf("unsupported scan type for Orderstatus: %T", src)
	}
	return nil
}

type NullOrderstatus struct {
	Orderstatus Orderstatus
	Valid       bool // Valid is true if Orderstatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderstatus) Scan(value interface{}) error {
	if value == nil {
		ns.Orderstatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Orderstatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderstatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Orderstatus), nil
}

type Ordertype string

const (
	OrdertypeDEBIT  Ordertype = "DEBIT"
	OrdertypeCREDIT Ordertype = "CREDIT"
)

func (e *Ordertype) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Ordertype(s)
	case string:
		*e = Ordertype(s)
	default:
		return fmt.Errorf("unsupported scan type for Ordertype: %T", src)
	}
	return nil
}

type NullOrdertype struct {
	Ordertype Ordertype
	Valid     bool // Valid is true if Ordertype is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrdertype) Scan(value interface{}) error {
	if value == nil {
		ns.Ordertype, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Ordertype.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrdertype) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Ordertype), nil
}

type Order struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	Amount      decimal.Decimal
	Number      string
	Type        Ordertype
	Status      Orderstatus
	ProcessedAt pgtype.Timestamptz
	CreatedAt   pgtype.Timestamptz
}
