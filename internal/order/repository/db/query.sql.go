// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const createTopUpOrder = `-- name: CreateTopUpOrder :one
INSERT INTO orders (user_id, number, amount, type)
VALUES ($1, $2, $3, 'CREDIT')
RETURNING id, user_id, amount, number, type, status, processed_at, created_at
`

type CreateTopUpOrderParams struct {
	UserID uuid.UUID
	Number string
	Amount decimal.Decimal
}

func (q *Queries) CreateTopUpOrder(ctx context.Context, arg CreateTopUpOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createTopUpOrder, arg.UserID, arg.Number, arg.Amount)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Number,
		&i.Type,
		&i.Status,
		&i.ProcessedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getOrderByNumber = `-- name: GetOrderByNumber :one
SELECT id, user_id, amount, number, type, status, processed_at, created_at
FROM orders
WHERE number = $1
`

func (q *Queries) GetOrderByNumber(ctx context.Context, number string) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderByNumber, number)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Number,
		&i.Type,
		&i.Status,
		&i.ProcessedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getTopUpOrdersByUserID = `-- name: GetTopUpOrdersByUserID :many
SELECT id, user_id, amount, number, type, status, processed_at, created_at
FROM orders
WHERE user_id = $1
`

func (q *Queries) GetTopUpOrdersByUserID(ctx context.Context, userID uuid.UUID) ([]Order, error) {
	rows, err := q.db.Query(ctx, getTopUpOrdersByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Number,
			&i.Type,
			&i.Status,
			&i.ProcessedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserBalanceByUserID = `-- name: GetUserBalanceByUserID :one
SELECT COALESCE(SUM(
                        CASE type
                            WHEN 'CREDIT' THEN amount
                            WHEN 'DEBIT' THEN -amount
                            ELSE 0
                            END
                ), 0::NUMERIC)::NUMERIC(10, 2)
FROM orders
WHERE user_id = $1 AND status = 'PROCESSED'
`

func (q *Queries) GetUserBalanceByUserID(ctx context.Context, userID uuid.UUID) (decimal.Decimal, error) {
	row := q.db.QueryRow(ctx, getUserBalanceByUserID, userID)
	var column_1 decimal.Decimal
	err := row.Scan(&column_1)
	return column_1, err
}

const getUserWithdrawByUserID = `-- name: GetUserWithdrawByUserID :one
SELECT COALESCE(SUM(amount), 0)::NUMERIC(10, 2)
FROM orders
WHERE user_id = $1
  AND type = 'DEBIT'
  AND status = 'PROCESSED'
`

func (q *Queries) GetUserWithdrawByUserID(ctx context.Context, userID uuid.UUID) (decimal.Decimal, error) {
	row := q.db.QueryRow(ctx, getUserWithdrawByUserID, userID)
	var column_1 decimal.Decimal
	err := row.Scan(&column_1)
	return column_1, err
}

const getWithdrawalsByUserID = `-- name: GetWithdrawalsByUserID :many
SELECT id, user_id, amount, number, type, status, processed_at, created_at
FROM orders
WHERE user_id = $1
  AND type = 'DEBIT'
  AND status = 'PROCESSED'
ORDER BY processed_at
`

func (q *Queries) GetWithdrawalsByUserID(ctx context.Context, userID uuid.UUID) ([]Order, error) {
	rows, err := q.db.Query(ctx, getWithdrawalsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Number,
			&i.Type,
			&i.Status,
			&i.ProcessedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE orders
SET status = $2
WHERE number = $1
`

type UpdateOrderStatusParams struct {
	Number string
	Status Orderstatus
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.Exec(ctx, updateOrderStatus, arg.Number, arg.Status)
	return err
}

const withdrawal = `-- name: Withdrawal :one
INSERT INTO orders (user_id, number, amount, type)
VALUES ($1, $2, $3, 'DEBIT')
RETURNING id, user_id, amount, number, type, status, processed_at, created_at
`

type WithdrawalParams struct {
	UserID uuid.UUID
	Number string
	Amount decimal.Decimal
}

func (q *Queries) Withdrawal(ctx context.Context, arg WithdrawalParams) (Order, error) {
	row := q.db.QueryRow(ctx, withdrawal, arg.UserID, arg.Number, arg.Amount)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Number,
		&i.Type,
		&i.Status,
		&i.ProcessedAt,
		&i.CreatedAt,
	)
	return i, err
}
