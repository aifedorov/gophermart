// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/user/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/user/repository.go -destination=internal/domain/user/mocks/repository_mock.go
//

// Package mock_user is a generated GoMock package.
package mock_user

import (
	user "github.com/aifedorov/gophermart/internal/user/repository"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(login, password string) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", login, password)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(login, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), login, password)
}

// GetUserByCredentials mocks base method.
func (m *MockRepository) GetUserByCredentials(login, password string) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByCredentials", login, password)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByCredentials indicates an expected call of GetUserByCredentials.
func (mr *MockRepositoryMockRecorder) GetUserByCredentials(login, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByCredentials", reflect.TypeOf((*MockRepository)(nil).GetUserByCredentials), login, password)
}

// GetUserByID mocks base method.
func (m *MockRepository) GetUserByID(userID string) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", userID)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockRepositoryMockRecorder) GetUserByID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockRepository)(nil).GetUserByID), userID)
}

// GetWithdrawalsByUserID mocks base method.
func (m *MockRepository) GetWithdrawalsByUserID(userID string) ([]user.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalsByUserID", userID)
	ret0, _ := ret[0].([]user.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalsByUserID indicates an expected call of GetWithdrawalsByUserID.
func (mr *MockRepositoryMockRecorder) GetWithdrawalsByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalsByUserID", reflect.TypeOf((*MockRepository)(nil).GetWithdrawalsByUserID), userID)
}

// Withdrawal mocks base method.
func (m *MockRepository) Withdrawal(userID, orderNumber string, sum float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdrawal", userID, orderNumber, sum)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdrawal indicates an expected call of Withdrawal.
func (mr *MockRepositoryMockRecorder) Withdrawal(userID, orderNumber, sum any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdrawal", reflect.TypeOf((*MockRepository)(nil).Withdrawal), userID, orderNumber, sum)
}
